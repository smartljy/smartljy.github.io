<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[关于swf格式转视频格式的操作]]></title>
    <url>%2F2019%2F01%2F17%2Fart5%2F</url>
    <content type="text"><![CDATA[使用工具： 格式工厂 会声会影 操作方法： 使用格式工厂提取swf文件中的Bgm 使用会声会影将swf与Bgm文件合成 使用会声会影转换输出文件格式为视频格式 注：格式工厂直接转换的swf文件存在只有音乐，画面不动的问题]]></content>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于C/S系统使用NPOI导出Excel并下载的方法]]></title>
    <url>%2F2019%2F01%2F17%2Fart4%2F</url>
    <content type="text"><![CDATA[关于C/S系统使用NPOI导出Excel并下载的方法123456789101112131415161718192021XSSFWorkbook workbook = new XSSFWorkbook();//读取xlsx格式 //HSSFWorkbook workbook = new HSSFWorkbook();//读取xls格式 ISheet sheet = workbook.CreateSheet(&quot;Sheet1&quot;); //表头 IRow row1 = sheet.CreateRow(0); for (int i = 0; i &lt; a.Columns.Count; i++) &#123; row1.CreateCell(i).SetCellValue(a.Columns[i].ColumnName); &#125; for (int k = 0; k &lt; a.Rows.Count; k++) &#123; IRow row = sheet.CreateRow(k + 1); //循环列赋值 for (int l = 0; l &lt; a.Columns.Count; l++) &#123; row.CreateCell(l).SetCellValue(a.Rows[k][l].ToString()); &#125; &#125;; FileStream d = new FileStream(&quot;c:\\n.xlsx&quot;, FileMode.Create, FileAccess.ReadWrite); workbook.Write(d); d.Close();]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【C#6.0语法】模版字符串]]></title>
    <url>%2F2019%2F01%2F17%2Fart3%2F</url>
    <content type="text"><![CDATA[【C#6.0语法】模版字符串什么是模版字符串？还记得你们用过的格式化字符串吗？string.Format() 这个方法，是最常用的方法之一。下面是一个简单的例子： 12345var name = &quot;张三&quot;;var age = 24;var address = &quot;北京市朝阳区&quot;;string.Format(&quot;我是&#123;0&#125;，今年&#123;1&#125;，家住在&#123;2&#125;&quot;, name, age, address);//输出 我是张三，今年24，家住在北京市朝阳区 这样的好处是解决了拼字符串的性能问题，但又会带来一种问题，那就是长篇引起的索引问题。试想一下，如果在长篇字符串中定位索引，你是不是会吐血？比如： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687string.Format(@&quot;--从Project表中加入项目数据select * from ( select ProjectName as orderCode,ProjectGUID,ProjectName, &apos;--&apos; AS &apos;项目合计&apos;, &apos;--&apos; AS &apos;以前年度合计&apos;, &apos;--&apos; AS &apos;2011年合计&apos;, &apos;--&apos; AS &apos;2011-01&apos;, &apos;--&apos; AS &apos;2011-02&apos;, &apos;--&apos; AS &apos;2011-03&apos;, &apos;--&apos; AS &apos;2011-04&apos;, &apos;--&apos; AS &apos;2011-05&apos;, &apos;--&apos; AS &apos;2011-06&apos;, &apos;--&apos; AS &apos;2011-07&apos;, &apos;--&apos; AS &apos;2011-08&apos;, &apos;--&apos; AS &apos;2011-09&apos;, &apos;--&apos; AS &apos;2011-10&apos;, &apos;--&apos; AS &apos;2011-11&apos;, &apos;--&apos; AS &apos;2011-12&apos;, &apos;--&apos; AS &apos;以后年度合计&apos; from Project where ProjectGUID=&#123;0&#125;----项目1 8FA659C8-3DA9-4330-B277-9B517E67606D 项目1 -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --```union all```--从产品表和Project表中加入合计行数据 select Project.ProjectName+&apos;.&apos;+a.ProductCode as orderCode,a.ProductGUID,a.ProductName, &apos;--&apos; AS &apos;项目合计&apos;, &apos;--&apos; AS &apos;以前年度合计&apos;, &apos;--&apos; AS &apos;2011年合计&apos;, &apos;--&apos; AS &apos;2011-01&apos;, &apos;--&apos; AS &apos;2011-02&apos;, &apos;--&apos; AS &apos;2011-03&apos;, &apos;--&apos; AS &apos;2011-04&apos;, &apos;--&apos; AS &apos;2011-05&apos;, &apos;--&apos; AS &apos;2011-06&apos;, &apos;--&apos; AS &apos;2011-07&apos;, &apos;--&apos; AS &apos;2011-08&apos;, &apos;--&apos; AS &apos;2011-09&apos;, &apos;--&apos; AS &apos;2011-10&apos;, &apos;--&apos; AS &apos;2011-11&apos;, &apos;--&apos; AS &apos;2011-12&apos;, &apos;--&apos; AS &apos;以后年度合计&apos; from #product a left join Project on a.ProjectGUID=Project.ProjectGUID----项目1 8FA659C8-3DA9-4330-B277-9B517E67606D 项目1 -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ------项目1.00 00000000-0000-0000-0000-000000000000 合计 -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ------项目1.产品1 18908255-DB67-4EA3-A231-8BB39D5B748B 产品1 -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ------项目1.产品2 EDB216A9-EBB8-4F2C-AE4E-0A989EC7A993 产品2 -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ------项目1.产品3 7040241F-5A66-4F17-AACA-7CBE2FB3BCB9 产品3 -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ------项目1.产品4 108778CD-47C0-4258-9CB6-1FBE90CDEBDA 产品4 -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ------项目1.产品5 43F7B9BA-EF91-4A38-A048-090179F33C9B 产品5 -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --```union ALL--从产品表和Project表、#tempSaleDtl3中加入类型行数据select c.ProjectName+&apos;.&apos;+b.ProductCode+&apos;.&apos;+a.typecode as orderCode,a.ProductGUID, a.[type], cast(a.[项目合计] as varchar(20)), cast(a.[以前年度合计] as varchar(20)), cast(a.[2011年合计] as varchar(20)), cast(a.[2011-01] as varchar(20)), cast(a.[2011-02] as varchar(20)), cast(a.[2011-03] as varchar(20)), cast(a.[2011-04] as varchar(20)), cast(a.[2011-05] as varchar(20)), cast(a.[2011-06] as varchar(20)), cast(a.[2011-07] as varchar(20)), cast(a.[2011-08] as varchar(20)), cast(a.[2011-09] as varchar(20)), cast(a.[2011-10] as varchar(20)), cast(a.[2011-11] as varchar(20)), cast(a.[2011-12] as varchar(20)), cast(a.[以后年度合计] as varchar(20))from #tempSaleDtl3 aleft join #product b on a.ProductGUID=b.ProductGUIDleft join Project c on b.ProjectGUID=c.ProjectGUID```) t1order by &#123;1&#125; &quot;, &quot;ProjectName&quot;, &quot;orderCode&quot;); 现在是写好了，但下一个需求让你加两个参数，你的索引位置又得变，还得在万码丛中查找你原来索引在哪里的，是不是很恶心？？ 模版字符串闪亮登场啦！1怎么用？在字符串的双引号前面加一个 `$` 符号，在需要使用变量的地方用`&#123;变量&#125;`就可以了。 12345var name = &quot;张三&quot;;var age = 24;var address = &quot;北京市朝阳区&quot;;$&quot;我是&#123;name&#125;，今年&#123;age&#125;，家住在&#123;address&#125;&quot;;//输出 我是张三，今年24，家住在北京市朝阳区 1&#123;变量&#125;`表示在字符串中输出变量的值，当然你也可以是一个表达式或者方法的执行。 1$&quot;我的生日是&#123;GetBirth()&#125;&quot;; 当然，调整顺序就显而易见啦，妈妈再也不用担心我把索引位置搞错啦！因为根本没有索引了，哈哈。 当然两者也可以被混用12345var name = &quot;张三&quot;;var age = 24;var address = &quot;北京市朝阳区&quot;;string.Format($&quot;我是&#123;name&#125;，今年&#123;age&#125;，家住在&#123;&#123;0&#125;&#125;&quot;, address); //输出 我是张三，今年24，家住在北京市朝阳区 1要注意的是需要用两次 &#123;&#123;索引&#125;&#125; 大括号将索引包含起来，因为一次是输出表达式，两次就转义成普通的占位符了，这点要注意！]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[冒泡排序的三种写法]]></title>
    <url>%2F2019%2F01%2F15%2Fart2%2F</url>
    <content type="text"><![CDATA[十大排序算法之冒泡排序好的，开始总结第一个排序算法，冒泡排序。我想对于它每个学过C语言的都会了解的吧，这可能是很多人接触的第一个排序算法。 (1)算法描述 冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。 (2)算法描述和实现具体算法描述如下： .比较相邻的元素。如果第一个比第二个大，就交换它们两个； .对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数； .针对所有的元素重复以上的步骤，除了最后一个； .重复步骤1~3，直到排序完成。 JavaScript代码实现： 123456789101112131415function bubbleSort(arr) &#123; var len = arr.length; for (var i = 0; i &lt; len; i++) &#123; for (var j = 0; j &lt; len - 1 - i; j++) &#123; if (arr[j] &gt; arr[j+1]) &#123; //相邻元素两两对比 var temp = arr[j+1]; //元素交换 arr[j+1] = arr[j]; arr[j] = temp; &#125; &#125; &#125; return arr;&#125;var arr=[3,44,38,5,47,15,36,26,27,2,46,4,19,50,48];console.log(bubbleSort(arr));//[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50] 改进冒泡排序： 设置一标志性变量pos,用于记录每趟排序中最后一次进行交换的位置。由于pos位置之后的记录均已交换到位,故在进行下一趟排序时只要扫描到pos位置即可。 改进后算法如下: 1234567891011121314151617function bubbleSort2(arr) &#123; console.time(&apos;改进后冒泡排序耗时&apos;); var i = arr.length-1; //初始时,最后位置保持不变 while ( i&gt; 0) &#123; var pos= 0; //每趟开始时,无记录交换 for (var j= 0; j&lt; i; j++) if (arr[j]&gt; arr[j+1]) &#123; pos= j; //记录交换的位置 var tmp = arr[j]; arr[j]=arr[j+1];arr[j+1]=tmp; &#125; i= pos; //为下一趟排序作准备 &#125; console.timeEnd(&apos;改进后冒泡排序耗时&apos;); return arr;&#125;var arr=[3,44,38,5,47,15,36,26,27,2,46,4,19,50,48];console.log(bubbleSort2(arr));//[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50] 传统冒泡排序中每一趟排序操作只能找到一个最大值或最小值,我们考虑利用在每趟排序中进行正向和反向两遍冒泡的方法一次可以得到两个最终值(最大者和最小者) , 从而使排序趟数几乎减少了一半。 改进后的算法实现为: 12345678910111213141516171819202122function bubbleSort3(arr3) &#123; var low = 0; var high= arr.length-1; //设置变量的初始值 var tmp,j; console.time('2.改进后冒泡排序耗时'); while (low &lt; high) &#123; for (j= low; j&lt; high; ++j) //正向冒泡,找到最大者 if (arr[j]&gt; arr[j+1]) &#123; tmp = arr[j]; arr[j]=arr[j+1];arr[j+1]=tmp; &#125; --high; //修改high值, 前移一位 for (j=high; j&gt;low; --j) //反向冒泡,找到最小者 if (arr[j]&lt;arr[j-1]) &#123; tmp = arr[j]; arr[j]=arr[j-1];arr[j-1]=tmp; &#125; ++low; //修改low值,后移一位 &#125; console.timeEnd('2.改进后冒泡排序耗时'); return arr3;&#125;var arr=[3,44,38,5,47,15,36,26,27,2,46,4,19,50,48];console.log(bubbleSort3(arr));//[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Li的第一篇文章]]></title>
    <url>%2F2019%2F01%2F13%2Fart1%2F</url>
    <content type="text"><![CDATA[Hello World这是我的第一篇Hexo文章，欢迎你的到来]]></content>
      <categories>
        <category>First</category>
      </categories>
      <tags>
        <tag>Hello World</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F01%2F13%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
